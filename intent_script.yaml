# Alexa Intents

# Locate Intent
  LocateIntent:
    speech:
      type: plain
      text: >
        {% if is_state('device_tracker.jon_iphone', 'home') %}
          He's at home.
        {% else %}
          He's not home.
        {% endif %}

# Sensors
  LivingroomTemp:
    speech:
      type: plain
      text: >
        The livingroom temperature is {{ states.sensor.livingroom_temperature_mean.state|round }} degrees, but it feels like {{ states.sensor.livingroom_heatindex_mean.state|round }}.

  OfficeTemp:
    speech:
      type: plain
      text: >
        The office temperature is {{ states.sensor.office_temperature_mean.state|round }} degrees, but it feels like {{ states.sensor.office_heatindex_mean.state|round }}.

  BedroomTemp:
    speech:
      type: plain
      text: >
        The bedroom temperature is {{ states.sensor.bedroom_temperature_mean.state|round }} degrees, but it feels like {{ states.sensor.bedroom_heatindex_mean.state|round }}.

# Security Report
  SecurityReport:
    speech:
      type: plain
      text: >
        {% if is_state('binary_sensor.front_dooropened', 'on') %}
          The front door is open.
        {% elif is_state('binary_sensor.patio_dooropened', 'on') %}
          The patio door is open.
        {% elif is_state('binary_sensor.motionsensor', 'on') %}
          Motion detected in the living room.
        {% elif is_state('binary_sensor.front_dooropened', 'off') and
                is_state('binary_sensor.patio_dooropened', 'off') and
                is_state('binary_sensor.motionsensor', 'off') %}
          The house is secure.
        {% endif %}

# Weather Forcast
  WeatherForcast:
    speech:
      type: plain
      text: >
          Currently it's {{ states.sensor.dark_sky_apparent_temperature.state | round(0) }} degrees, and {{ states.sensor.dark_sky_minutely_summary.state }}. Later, you should expect {{ states.sensor.dark_sky_hourly_summary.state }}, with a high of {{ states.sensor.dark_sky_daily_high_apparent_temperature.state | round(0) }} degrees, and a low of {{ states.sensor.dark_sky_daily_low_apparent_temperature.state | round(0) }}.

  WeatherJacket:
    speech:
      type: plain
      text: >
        {% if states('sensor.dark_sky_apparent_temperature') | float < 45 %}
          Yes you do, it's currently {{ states.sensor.dark_sky_apparent_temperature.state | round(0) }} degrees.
        {% elif states('sensor.dark_sky_apparent_temperature') | float > 50 %}
          Maybe, it's currently {{ states.sensor.dark_sky_apparent_temperature.state | round(0) }} degrees.
        {% elif states('sensor.dark_sky_apparent_temperature') | float > 60 %}
          No, you should be good, it's currently {{ states.sensor.dark_sky_apparent_temperature.state | round(0) }} degrees.
        {% endif %}

# Dishes Intent
  DishesIntent:
    action:
      service: script.turn_on
      data:
        entity_id: script.dishwasher_dirty
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml

# Laundry Intent
  LaundryIntent:
    action:
      service: script.turn_on
      data:
        entity_id: script.washing_machine_idle
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml

# Plant_Intent
  WaterPlants:
    speech:
      type: plain
      text: >
        {% if is_state('plant.moneytree', 'Problem') %}
          The moneytree needs water.
        {% elif is_state('plant.pothos', 'Problem') %}
          The pothos needs water.
        {% else %}
          The plants are doing good.
        {% endif %}

# 3D Printer Intent
  PrintProgress:
    speech:
      type: plain
      text: >
        {% if is_state('sensor.octoprint_current_state', 'unknown') %}
          The 3D printer is currently off.
        {% elif is_state('sensor.octoprint_current_state', 'Operational') %}
          The printer is on, but nothing is currently printing.
        {% elif is_state('sensor.octoprint_current_state', 'Printing') %}
          Your current print is {{ states.sensor.octoprint_job_percentage.state }} percent done.
        {% endif %}

# Apple TV Control
  PlayIntent:
    action:
      service: remote.send_command
      data:
        entity_id: remote.apple_tv
        command: play
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml

  PauseIntent:
    action:
      service: remote.send_command
      data:
        entity_id: remote.apple_tv
        command: pause
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml

# Roomba Intents
  RoombaClean:
    action:
      service: script.turn_on
      data:
        entity_id: script.vacuum_start_pause
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml

# Bedroom Oil Diffuser Intent
  BedroomDiffuserOn:
    action:
      service: script.turn_on
      data:
        entity_id: script.bedroom_diffuser_on
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml

  BedroomDiffuserOff:
    action:
      service: script.turn_on
      data:
        entity_id: script.bedroom_diffuser_off
    speech:
      type: plain
      text: !include alexa/alexa_confirm.yaml
